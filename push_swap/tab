./srcs/rd_sort.c:	max_bit = check_max_bit(list->stack_a);
./srcs/rd_sort.c:	if (stack_is_sorted(list->tab, size))
./srcs/rd_sort.c:	free(list->tab);
./srcs/exit.c:	if (list->tab)
./srcs/exit.c:		free(list->tab);
./srcs/exit.c:	free_list(list->stack_a);
./srcs/exit.c:	free_list(list->stack_b);
./srcs/init.c:	list->nb_instr = 0;
./srcs/init.c:	list->stack_a = arr_to_stack(av);
./srcs/init.c:	if (!list->stack_a)
./srcs/init.c:	list->stack_b = NULL;
./srcs/init.c:	list->tab = list_to_tab(list->stack_a);
./srcs/init.c:	if (!list->tab)
./srcs/init.c:	set_order(list->stack_a, list->tab);
./srcs/init.c:	free(list->tab);
./srcs/init.c:	list->tab = poslist_to_tab(list->stack_a);
./srcs/init.c:	if (!list->tab)
./srcs/init.c:	set_order_tab(list->tab, stack_size(list->stack_a));
./srcs/init.c:	postab_to_list(list->tab, list->stack_a);
./srcs/utils.c:		list = list->next;
./srcs/utils.c:		res[i++] = list->n;
./srcs/utils.c:		list = list->next;
./srcs/utils.c:		res[i++] = list->pos;
./srcs/utils.c:		list = list->next;
./srcs/small_sort.c:	a = list->stack_a;
./srcs/small_sort.c:	if (!stack_is_sorted(list->tab, size))
./srcs/small_sort.c:	tmp = list->tab;
./srcs/small_sort.c:		if (list->stack_a->pos == list->stack_a->next->pos + 1)
./srcs/small_sort.c:			sa(list->stack_a);
./srcs/small_sort.c:		else if (is_biggest(list->stack_a, list->stack_a->pos))
./srcs/small_sort.c:			list->stack_a = ra(list->stack_a);
./srcs/small_sort.c:		else if (is_biggest(list->stack_a, list->stack_a->next->pos))
./srcs/small_sort.c:			list->stack_a = rra(list->stack_a);
./srcs/small_sort.c:		tmp = list_to_tab(list->stack_a);
./srcs/small_sort.c:	while (stack_size(list->stack_a) != 3)
./srcs/small_sort.c:		if (is_biggest(list->stack_a, list->stack_a->pos))
./srcs/small_sort.c:			pb(&list->stack_a, &list->stack_b);
./srcs/small_sort.c:		else if (is_smallest(list->stack_a, list->stack_a->pos))
./srcs/small_sort.c:			pb(&list->stack_a, &list->stack_b);
./srcs/small_sort.c:			list->stack_a = ra(list->stack_a);
./srcs/small_sort.c:	trick_sort(list, stack_size(list->stack_a));
./srcs/small_sort.c:	while (stack_size(list->stack_a) != size)
./srcs/small_sort.c:		pa(&list->stack_b, &list->stack_a);
./srcs/small_sort.c:		if (is_biggest(list->stack_a, list->stack_a->pos))
./srcs/small_sort.c:			list->stack_a = ra(list->stack_a);
./srcs/boxes.c:	while (list->next)
./srcs/boxes.c:		list = list->next;
./srcs/boxes.c:	return (list->pos);
./srcs/boxes.c:	if (check_ith_bit(list->stack_a, ith))
./srcs/boxes.c:		list->stack_a = ra(list->stack_a);
./srcs/boxes.c:		pb(&list->stack_a, &list->stack_b);
./srcs/boxes.c:	last = find_last(list->stack_a);
./srcs/boxes.c:	while (list->stack_a)
./srcs/boxes.c:		if (list->stack_a->pos == last)
./srcs/boxes.c:			list->nb_instr = list->nb_instr + 1;
./srcs/boxes.c:		list->nb_instr = list->nb_instr + 1;
./srcs/boxes.c:	while (list->stack_b)
./srcs/boxes.c:		list->nb_instr = list->nb_instr + 1;
./srcs/boxes.c:		pa(&list->stack_b, &list->stack_a);

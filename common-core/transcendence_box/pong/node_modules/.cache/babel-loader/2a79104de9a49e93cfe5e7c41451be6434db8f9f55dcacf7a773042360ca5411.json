{"ast":null,"code":"var _jsxFileName = \"/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameBox from './GameBox';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiplayerManager = props => {\n  _s();\n  const [infos, setInfos] = useState({\n    opponentX: 860,\n    opponentY: 200,\n    userId: Math.floor(Math.random() * 9999) + 1,\n    matchFound: false\n  });\n\n  // const socket = io('ws://localhost:8000');\n\n  useEffect(() => {\n    const socket = io.connect(\"http://localhost:8000\", {\n      query: {\n        userId: infos.userId\n      }\n    });\n    window.addEventListener('beforeunload', () => {\n      socket.disconnect();\n    });\n\n    // Listen to the 'connect' event\n    socket.on('connect', () => {\n      console.log('Connected to socket.io server');\n      console.log('User Id :' + infos.userId);\n    });\n    socket.on('connect_error', error => {\n      console.error('Failed to connect to socket.io server', error);\n    });\n\n    // Listen to the 'opponentMoved' event\n    socket.on('opponentMoved', data => {\n      setInfos({\n        opponentX: data.x,\n        opponentY: data.y\n      });\n    });\n\n    // Emit a 'playerMoved' event\n    // const handleMove = (x, y) => {\n    //    socket.emit('playerMoved', { x, y });\n    // }\n\n    // Clean up the event listeners when the component unmounts\n    return () => {\n      window.removeEventListener('beforeunload', () => {\n        socket.disconnect();\n      });\n      socket.off('connect');\n      socket.off('opponentMoved');\n      socket.disconnect();\n    };\n  }, [infos]);\n  return /*#__PURE__*/_jsxDEV(GameBox, {\n    height: props.height,\n    width: props.width,\n    opponentPosX: infos.opponentX,\n    opponentPosY: infos.opponentY\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(MultiplayerManager, \"8fH4RfNzTi+wcCorQzS/DE1sDjo=\");\n_c = MultiplayerManager;\nexport default MultiplayerManager;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerManager\");","map":{"version":3,"names":["useEffect","useState","GameBox","io","jsxDEV","_jsxDEV","MultiplayerManager","props","_s","infos","setInfos","opponentX","opponentY","userId","Math","floor","random","matchFound","socket","connect","query","window","addEventListener","disconnect","on","console","log","error","data","x","y","removeEventListener","off","height","width","opponentPosX","opponentPosY","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameBox from './GameBox';\nimport io from 'socket.io-client'\n\n\n\n\nconst MultiplayerManager = (props) => {\n    const [infos, setInfos] = useState({\n        opponentX: 860,\n        opponentY: 200,\n        userId: Math.floor(Math.random() * 9999) + 1,\n        matchFound: false,\n    })\n\n    // const socket = io('ws://localhost:8000');\n\n    useEffect(() => {\n        const socket=io.connect(\"http://localhost:8000\", {\n            query: {\n                userId: infos.userId\n            }\n        })\n        \n        window.addEventListener('beforeunload', () => {\n            socket.disconnect();\n          });\n\n        \n        // Listen to the 'connect' event\n        socket.on('connect', () => {\n            console.log('Connected to socket.io server');\n            console.log('User Id :' + infos.userId);\n        });\n        \n        socket.on('connect_error', (error) => {\n            console.error('Failed to connect to socket.io server', error);\n        });\n        \n        // Listen to the 'opponentMoved' event\n        socket.on('opponentMoved', (data) => {\n           setInfos({\n              opponentX: data.x,\n              opponentY: data.y,\n           });\n        });\n        \n        // Emit a 'playerMoved' event\n        // const handleMove = (x, y) => {\n        //    socket.emit('playerMoved', { x, y });\n        // }\n        \n        // Clean up the event listeners when the component unmounts\n        return () => {\n            window.removeEventListener('beforeunload', () => {\n                socket.disconnect();\n              });\n           socket.off('connect');\n           socket.off('opponentMoved');\n           socket.disconnect();\n        };\n     }, [infos]);\n    \n    return (\n        <GameBox height={props.height} width={props.width}\n        opponentPosX={infos.opponentX} opponentPosY={infos.opponentY}>\n        </GameBox>\n    )\n}\n\n\n \nexport default MultiplayerManager;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,EAAE,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKjC,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC;IAC/BU,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE,GAAG;IACdC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;IAC5CC,UAAU,EAAE;EAChB,CAAC,CAAC;;EAEF;;EAEAjB,SAAS,CAAC,MAAM;IACZ,MAAMkB,MAAM,GAACf,EAAE,CAACgB,OAAO,CAAC,uBAAuB,EAAE;MAC7CC,KAAK,EAAE;QACHP,MAAM,EAAEJ,KAAK,CAACI;MAClB;IACJ,CAAC,CAAC;IAEFQ,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,MAAM;MAC1CJ,MAAM,CAACK,UAAU,EAAE;IACrB,CAAC,CAAC;;IAGJ;IACAL,MAAM,CAACM,EAAE,CAAC,SAAS,EAAE,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGjB,KAAK,CAACI,MAAM,CAAC;IAC3C,CAAC,CAAC;IAEFK,MAAM,CAACM,EAAE,CAAC,eAAe,EAAGG,KAAK,IAAK;MAClCF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IACjE,CAAC,CAAC;;IAEF;IACAT,MAAM,CAACM,EAAE,CAAC,eAAe,EAAGI,IAAI,IAAK;MAClClB,QAAQ,CAAC;QACNC,SAAS,EAAEiB,IAAI,CAACC,CAAC;QACjBjB,SAAS,EAAEgB,IAAI,CAACE;MACnB,CAAC,CAAC;IACL,CAAC,CAAC;;IAEF;IACA;IACA;IACA;;IAEA;IACA,OAAO,MAAM;MACTT,MAAM,CAACU,mBAAmB,CAAC,cAAc,EAAE,MAAM;QAC7Cb,MAAM,CAACK,UAAU,EAAE;MACrB,CAAC,CAAC;MACLL,MAAM,CAACc,GAAG,CAAC,SAAS,CAAC;MACrBd,MAAM,CAACc,GAAG,CAAC,eAAe,CAAC;MAC3Bd,MAAM,CAACK,UAAU,EAAE;IACtB,CAAC;EACJ,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC;EAEZ,oBACIJ,OAAA,CAACH,OAAO;IAAC+B,MAAM,EAAE1B,KAAK,CAAC0B,MAAO;IAACC,KAAK,EAAE3B,KAAK,CAAC2B,KAAM;IAClDC,YAAY,EAAE1B,KAAK,CAACE,SAAU;IAACyB,YAAY,EAAE3B,KAAK,CAACG;EAAU;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnD;AAElB,CAAC;AAAAhC,EAAA,CA7DKF,kBAAkB;AAAAmC,EAAA,GAAlBnC,kBAAkB;AAiExB,eAAeA,kBAAkB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from 'react';\nimport GameBox from './GameBox';\nimport io from 'socket.io-client';\nimport WaitingBox from './WaitingBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STARTPOS_Y = 200;\nconst STARTPOS_X = 860;\nconst ONLINEMODE = 0;\nconst PLAYERMODE = 2;\nconst MultiplayerManager = props => {\n  _s();\n  const [infos, setInfos] = useState({\n    opponentX: STARTPOS_X,\n    opponentY: STARTPOS_Y,\n    userId: Math.floor(Math.random() * 9999) + 1,\n    matchFound: false,\n    rightPlayer: ONLINEMODE,\n    leftPlayer: PLAYERMODE,\n    connected: false\n  });\n  const socketRef = useRef(null);\n\n  // const socket = io('ws://localhost:8000');\n\n  useEffect(() => {\n    console.log(infos);\n    let socket;\n    if (!socketRef.current) {\n      socket = io.connect(\"http://localhost:8000\", {\n        query: {\n          userId: infos.userId\n        }\n      });\n      socketRef.current = socket;\n      window.addEventListener('beforeunload', () => {\n        socket.disconnect();\n      });\n\n      // Listen to the 'connect' event\n      socket.on('connect', () => {\n        console.log('Connected to socket.io server');\n        console.log('User Id :' + infos.userId);\n        setInfos(prevInfos => ({\n          ...prevInfos,\n          connected: true\n        }));\n      });\n\n      //Listen to both p1 and p2 events to determinate on which pos you will be\n      socket.on('game-start', () => {\n        console.log(\"match found !\");\n        setInfos(prevInfos => ({\n          ...prevInfos,\n          matchFound: true,\n          rightPlayer: ONLINEMODE,\n          leftPlayer: PLAYERMODE\n        }));\n      });\n      socket.on('game-start-p2', () => {\n        console.log(\"match found !\");\n        setInfos(prevInfos => ({\n          ...prevInfos,\n          matchFound: true,\n          rightPlayer: PLAYERMODE,\n          leftPlayer: ONLINEMODE\n        }));\n      });\n      socket.on('connect_error', error => {\n        console.error('Failed to connect to socket.io server', error);\n      });\n\n      // Listen to the 'opponentMoved' event\n      socket.on('opponentMoved', data => {\n        setInfos({\n          opponentX: data.x,\n          opponentY: data.y\n        });\n      });\n\n      // Emit a 'playerMoved' event\n      // const handleMove = (x, y) => {\n      //    socket.emit('playerMoved', { x, y });\n      // }\n\n      // Clean up the event listeners when the component unmounts\n      return () => {\n        window.removeEventListener('beforeunload', () => {\n          socket.disconnect();\n        });\n        socket.off('connect');\n        socket.off('opponentMoved');\n        socket.disconnect();\n      };\n    }\n  }, [infos]);\n  return infos.matchFound === true ? /*#__PURE__*/_jsxDEV(GameBox, {\n    height: props.height,\n    width: props.width,\n    opponentPosX: infos.opponentX,\n    opponentPosY: infos.opponentY,\n    rightPlayer: infos.rightPlayer,\n    leftPlayer: infos.leftPlayer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 11\n  }, this) : /*#__PURE__*/_jsxDEV(WaitingBox, {\n    height: props.height,\n    width: props.width\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 11\n  }, this);\n};\n_s(MultiplayerManager, \"qOEA2YcbNW1l/tEThAl7drlIOcs=\");\n_c = MultiplayerManager;\nexport default MultiplayerManager;\n\n/* MISC\n\n        //DEFAULT TESTING: NEED TO BE REMOVED\n        socket.on('game-start', () => {\n            console.log(\"match found !\");\n            setInfos(prevInfos => ({\n                ...prevInfos,\n                matchFound: true\n              }));\n        })\n\n*/\nvar _c;\n$RefreshReg$(_c, \"MultiplayerManager\");","map":{"version":3,"names":["useEffect","useState","useRef","GameBox","io","WaitingBox","jsxDEV","_jsxDEV","STARTPOS_Y","STARTPOS_X","ONLINEMODE","PLAYERMODE","MultiplayerManager","props","_s","infos","setInfos","opponentX","opponentY","userId","Math","floor","random","matchFound","rightPlayer","leftPlayer","connected","socketRef","console","log","socket","current","connect","query","window","addEventListener","disconnect","on","prevInfos","error","data","x","y","removeEventListener","off","height","width","opponentPosX","opponentPosY","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport GameBox from './GameBox';\nimport io from 'socket.io-client'\nimport WaitingBox from './WaitingBox'\n\nconst STARTPOS_Y = 200;\nconst STARTPOS_X = 860;\nconst ONLINEMODE = 0;\nconst PLAYERMODE = 2;\n\nconst MultiplayerManager = (props) => {\n    const [infos, setInfos] = useState({\n        opponentX: STARTPOS_X,\n        opponentY: STARTPOS_Y,\n        userId: Math.floor(Math.random() * 9999) + 1,\n        matchFound: false,\n        rightPlayer: ONLINEMODE,\n        leftPlayer: PLAYERMODE,\n        connected: false\n    })\n\n    const socketRef = useRef(null);\n\n    // const socket = io('ws://localhost:8000');\n\n    useEffect(() => {\n        console.log(infos);\n        let socket;\n        if (!socketRef.current)\n        {\n            socket=io.connect(\"http://localhost:8000\", {\n            query: {\n                userId: infos.userId\n            }\n          })\n          socketRef.current = socket;\n        \n        \n        window.addEventListener('beforeunload', () => {\n            socket.disconnect();\n          });\n        \n        // Listen to the 'connect' event\n        socket.on('connect', () => {\n            console.log('Connected to socket.io server');\n            console.log('User Id :' + infos.userId);\n            setInfos(prevInfos => ({\n              ...prevInfos,\n              connected: true,\n            }));\n        });\n        \n\n        //Listen to both p1 and p2 events to determinate on which pos you will be\n        socket.on('game-start', () => {\n          console.log(\"match found !\");\n          setInfos(prevInfos => ({\n              ...prevInfos,\n              matchFound: true,\n              rightPlayer: ONLINEMODE,\n              leftPlayer: PLAYERMODE\n            }));\n        })\n\n        socket.on('game-start-p2', () => {\n          console.log(\"match found !\");\n          setInfos(prevInfos => ({\n              ...prevInfos,\n              matchFound: true,\n              rightPlayer: PLAYERMODE,\n              leftPlayer: ONLINEMODE\n            }));\n        })\n        socket.on('connect_error', (error) => {\n            console.error('Failed to connect to socket.io server', error);\n        });\n        \n        // Listen to the 'opponentMoved' event\n        socket.on('opponentMoved', (data) => {\n           setInfos({\n              opponentX: data.x,\n              opponentY: data.y,\n           });\n        });\n        \n        // Emit a 'playerMoved' event\n        // const handleMove = (x, y) => {\n        //    socket.emit('playerMoved', { x, y });\n        // }\n        \n        // Clean up the event listeners when the component unmounts\n        return () => {\n            window.removeEventListener('beforeunload', () => {\n                socket.disconnect();\n              });\n           socket.off('connect');\n           socket.off('opponentMoved');\n           socket.disconnect();\n        };\n        }\n     }, [infos]);\n\n    return (\n        infos.matchFound === true ? (\n          <GameBox height={props.height} width={props.width}\n            opponentPosX={infos.opponentX} opponentPosY={infos.opponentY}\n            rightPlayer={infos.rightPlayer} leftPlayer={infos.leftPlayer}\n          />\n        ) : (\n          <WaitingBox height={props.height} width={props.width} />\n        )\n      );\n}\n\n\n \nexport default MultiplayerManager;\n\n\n/* MISC\n\n        //DEFAULT TESTING: NEED TO BE REMOVED\n        socket.on('game-start', () => {\n            console.log(\"match found !\");\n            setInfos(prevInfos => ({\n                ...prevInfos,\n                matchFound: true\n              }));\n        })\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
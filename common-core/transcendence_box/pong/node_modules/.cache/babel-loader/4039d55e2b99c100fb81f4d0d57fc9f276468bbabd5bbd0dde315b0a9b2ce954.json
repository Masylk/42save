{"ast":null,"code":"var _jsxFileName = \"/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameBox from './GameBox';\nimport io from 'socket.io-client';\nimport WaitingBox from './WaitingBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STARTPOS_Y = 200;\nconst STARTPOS_X = 860;\nconst ONLINEMODE = 0;\nconst PLAYERMODE = 2;\nconst MultiplayerManager = props => {\n  _s();\n  const [infos, setInfos] = useState({\n    opponentX: STARTPOS_X,\n    opponentY: STARTPOS_Y,\n    userId: Math.floor(Math.random() * 9999) + 1,\n    matchFound: false,\n    rightPlayer: ONLINEMODE,\n    leftPlayer: PLAYERMODE,\n    connected: false\n  });\n  const socketRef = userRef(null);\n\n  // const socket = io('ws://localhost:8000');\n\n  useEffect(() => {\n    console.log(infos);\n    if (!socketRef.current) {\n      const socket = io.connect(\"http://localhost:8000\", {\n        query: {\n          userId: infos.userId\n        }\n      });\n      socketRef.current = socket;\n    }\n    window.addEventListener('beforeunload', () => {\n      socket.disconnect();\n    });\n\n    // Listen to the 'connect' event\n    socket.on('connect', () => {\n      console.log('Connected to socket.io server');\n      console.log('User Id :' + infos.userId);\n      setInfos(prevInfos => ({\n        ...prevInfos,\n        connected: true\n      }));\n    });\n\n    //DEFAULT TESTING: NEED TO BE REMOVED\n    socket.on('game-start', () => {\n      console.log(\"match found !\");\n      setInfos(prevInfos => ({\n        ...prevInfos,\n        matchFound: true\n      }));\n    });\n\n    //Listen to both p1 and p2 events to determinate on which pos you will be\n    socket.on('game-start-p1', () => {\n      console.log(\"match found !\");\n      setInfos(prevInfos => ({\n        ...prevInfos,\n        matchFound: true,\n        rightPlayer: ONLINEMODE,\n        leftPlayer: PLAYERMODE\n      }));\n    });\n    socket.on('game-start-p2', () => {\n      console.log(\"match found !\");\n      setInfos(prevInfos => ({\n        ...prevInfos,\n        matchFound: true,\n        rightPlayer: PLAYERMODE,\n        leftPlayer: ONLINEMODE\n      }));\n    });\n    socket.on('connect_error', error => {\n      console.error('Failed to connect to socket.io server', error);\n    });\n\n    // Listen to the 'opponentMoved' event\n    socket.on('opponentMoved', data => {\n      setInfos({\n        opponentX: data.x,\n        opponentY: data.y\n      });\n    });\n\n    // Emit a 'playerMoved' event\n    // const handleMove = (x, y) => {\n    //    socket.emit('playerMoved', { x, y });\n    // }\n\n    // Clean up the event listeners when the component unmounts\n    return () => {\n      window.removeEventListener('beforeunload', () => {\n        socket.disconnect();\n      });\n      socket.off('connect');\n      socket.off('opponentMoved');\n      socket.disconnect();\n    };\n  }, []);\n  return infos.matchFound === true ? /*#__PURE__*/_jsxDEV(GameBox, {\n    height: props.height,\n    width: props.width,\n    opponentPosX: infos.opponentX,\n    opponentPosY: infos.opponentY,\n    rightPlayer: infos.rightPlayer,\n    leftPlayer: infos.leftPlayer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 11\n  }, this) : /*#__PURE__*/_jsxDEV(WaitingBox, {\n    height: props.height,\n    width: props.width\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 11\n  }, this);\n};\n_s(MultiplayerManager, \"LlhzIbeCZs7ph4glLb4BSJQvNDc=\");\n_c = MultiplayerManager;\nexport default MultiplayerManager;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerManager\");","map":{"version":3,"names":["useEffect","useState","GameBox","io","WaitingBox","jsxDEV","_jsxDEV","STARTPOS_Y","STARTPOS_X","ONLINEMODE","PLAYERMODE","MultiplayerManager","props","_s","infos","setInfos","opponentX","opponentY","userId","Math","floor","random","matchFound","rightPlayer","leftPlayer","connected","socketRef","userRef","console","log","current","socket","connect","query","window","addEventListener","disconnect","on","prevInfos","error","data","x","y","removeEventListener","off","height","width","opponentPosX","opponentPosY","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameBox from './GameBox';\nimport io from 'socket.io-client'\nimport WaitingBox from './WaitingBox'\n\nconst STARTPOS_Y = 200;\nconst STARTPOS_X = 860;\nconst ONLINEMODE = 0;\nconst PLAYERMODE = 2;\n\nconst MultiplayerManager = (props) => {\n    const [infos, setInfos] = useState({\n        opponentX: STARTPOS_X,\n        opponentY: STARTPOS_Y,\n        userId: Math.floor(Math.random() * 9999) + 1,\n        matchFound: false,\n        rightPlayer: ONLINEMODE,\n        leftPlayer: PLAYERMODE,\n        connected: false\n    })\n\n    const socketRef = userRef(null);\n\n    // const socket = io('ws://localhost:8000');\n\n    useEffect(() => {\n        console.log(infos);\n\n        if (!socketRef.current)\n        {\n          const socket=io.connect(\"http://localhost:8000\", {\n            query: {\n                userId: infos.userId\n            }\n          })\n          socketRef.current = socket;\n        }\n        \n        \n        window.addEventListener('beforeunload', () => {\n            socket.disconnect();\n          });\n\n        \n        // Listen to the 'connect' event\n        socket.on('connect', () => {\n            console.log('Connected to socket.io server');\n            console.log('User Id :' + infos.userId);\n            setInfos(prevInfos => ({\n              ...prevInfos,\n              connected: true,\n            }));\n        });\n        \n        //DEFAULT TESTING: NEED TO BE REMOVED\n        socket.on('game-start', () => {\n            console.log(\"match found !\");\n            setInfos(prevInfos => ({\n                ...prevInfos,\n                matchFound: true\n              }));\n        })\n\n        //Listen to both p1 and p2 events to determinate on which pos you will be\n        socket.on('game-start-p1', () => {\n          console.log(\"match found !\");\n          setInfos(prevInfos => ({\n              ...prevInfos,\n              matchFound: true,\n              rightPlayer: ONLINEMODE,\n              leftPlayer: PLAYERMODE\n            }));\n        })\n\n        socket.on('game-start-p2', () => {\n          console.log(\"match found !\");\n          setInfos(prevInfos => ({\n              ...prevInfos,\n              matchFound: true,\n              rightPlayer: PLAYERMODE,\n              leftPlayer: ONLINEMODE\n            }));\n        })\n        socket.on('connect_error', (error) => {\n            console.error('Failed to connect to socket.io server', error);\n        });\n        \n        // Listen to the 'opponentMoved' event\n        socket.on('opponentMoved', (data) => {\n           setInfos({\n              opponentX: data.x,\n              opponentY: data.y,\n           });\n        });\n        \n        // Emit a 'playerMoved' event\n        // const handleMove = (x, y) => {\n        //    socket.emit('playerMoved', { x, y });\n        // }\n        \n        // Clean up the event listeners when the component unmounts\n        return () => {\n            window.removeEventListener('beforeunload', () => {\n                socket.disconnect();\n              });\n           socket.off('connect');\n           socket.off('opponentMoved');\n           socket.disconnect();\n        };\n     }, []);\n\n    return (\n        infos.matchFound === true ? (\n          <GameBox height={props.height} width={props.width}\n            opponentPosX={infos.opponentX} opponentPosY={infos.opponentY}\n            rightPlayer={infos.rightPlayer} leftPlayer={infos.leftPlayer}\n          />\n        ) : (\n          <WaitingBox height={props.height} width={props.width} />\n        )\n      );\n}\n\n\n \nexport default MultiplayerManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
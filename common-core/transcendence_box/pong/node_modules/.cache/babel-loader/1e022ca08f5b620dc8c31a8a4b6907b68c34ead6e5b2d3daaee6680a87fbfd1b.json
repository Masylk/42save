{"ast":null,"code":"var _jsxFileName = \"/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport GameBox from './GameBox';\nimport styled from 'styled-components';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiplayerManager = props => {\n  _s();\n  const [infos, setInfos] = useState({\n    opponentX: 860,\n    opponentY: 200\n  });\n\n  // const socket = io('ws://localhost:8000');\n\n  useEffect(() => {\n    const socket = io.connect(\"http://localhost:8000\");\n    // Listen to the 'connect' event\n    socket.on('connect', () => {\n      console.log('Connected to socket.io server');\n    });\n    socket.on('connect_error', error => {\n      console.error('Failed to connect to socket.io server', error);\n    });\n    socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n\n    // Listen to the 'opponentMoved' event\n    socket.on('opponentMoved', data => {\n      setInfos({\n        opponentX: data.x,\n        opponentY: data.y\n      });\n    });\n\n    // Emit a 'playerMoved' event\n    const handleMove = (x, y) => {\n      socket.emit('playerMoved', {\n        x,\n        y\n      });\n    };\n\n    // Clean up the event listeners when the component unmounts\n    return () => {\n      socket.off('connect');\n      socket.off('opponentMoved');\n    };\n  }, [setInfos]);\n  return /*#__PURE__*/_jsxDEV(GameBox, {\n    height: props.height,\n    width: props.width,\n    opponentPosX: infos.opponentX,\n    opponentPosY: infos.opponentY,\n    socket: socket\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(MultiplayerManager, \"wvEl2phXcfXOF5v35Xrf3B8hk9U=\");\n_c = MultiplayerManager;\nexport default MultiplayerManager;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerManager\");","map":{"version":3,"names":["useEffect","useState","GameBox","styled","io","jsxDEV","_jsxDEV","MultiplayerManager","props","_s","infos","setInfos","opponentX","opponentY","socket","connect","on","console","log","error","data","x","y","handleMove","emit","off","height","width","opponentPosX","opponentPosY","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mtogbe/42save/transcendence_box/pong/src/components/MultiplayerManager.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport GameBox from './GameBox';\nimport styled from 'styled-components'\nimport io from 'socket.io-client'\n\n\n\n\nconst MultiplayerManager = (props) => {\n    const [infos, setInfos] = useState({\n        opponentX: 860,\n        opponentY: 200,\n    })\n\n    // const socket = io('ws://localhost:8000');\n\n    useEffect(() => {\n        const socket=io.connect(\"http://localhost:8000\")\n        // Listen to the 'connect' event\n        socket.on('connect', () => {\n            console.log('Connected to socket.io server');\n        });\n        \n        socket.on('connect_error', (error) => {\n            console.error('Failed to connect to socket.io server', error);\n        });\n        socket.on('connect', () => {\n           console.log('Connected to server');\n        });\n        \n        // Listen to the 'opponentMoved' event\n        socket.on('opponentMoved', (data) => {\n           setInfos({\n              opponentX: data.x,\n              opponentY: data.y,\n           });\n        });\n        \n        // Emit a 'playerMoved' event\n        const handleMove = (x, y) => {\n           socket.emit('playerMoved', { x, y });\n        }\n        \n        // Clean up the event listeners when the component unmounts\n        return () => {\n           socket.off('connect');\n           socket.off('opponentMoved');\n        };\n     }, [setInfos]);\n    \n    return (\n        <GameBox height={props.height} width={props.width}\n        opponentPosX={infos.opponentX} opponentPosY={infos.opponentY} socket={socket}>\n        </GameBox>\n    )\n}\n\n\n \nexport default MultiplayerManager;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,EAAE,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKjC,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC;IAC/BW,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE;EACf,CAAC,CAAC;;EAEF;;EAEAb,SAAS,CAAC,MAAM;IACZ,MAAMc,MAAM,GAACV,EAAE,CAACW,OAAO,CAAC,uBAAuB,CAAC;IAChD;IACAD,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAChD,CAAC,CAAC;IAEFJ,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGG,KAAK,IAAK;MAClCF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IACjE,CAAC,CAAC;IACFL,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACxBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACrC,CAAC,CAAC;;IAEF;IACAJ,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGI,IAAI,IAAK;MAClCT,QAAQ,CAAC;QACNC,SAAS,EAAEQ,IAAI,CAACC,CAAC;QACjBR,SAAS,EAAEO,IAAI,CAACE;MACnB,CAAC,CAAC;IACL,CAAC,CAAC;;IAEF;IACA,MAAMC,UAAU,GAAGA,CAACF,CAAC,EAAEC,CAAC,KAAK;MAC1BR,MAAM,CAACU,IAAI,CAAC,aAAa,EAAE;QAAEH,CAAC;QAAEC;MAAE,CAAC,CAAC;IACvC,CAAC;;IAED;IACA,OAAO,MAAM;MACVR,MAAM,CAACW,GAAG,CAAC,SAAS,CAAC;MACrBX,MAAM,CAACW,GAAG,CAAC,eAAe,CAAC;IAC9B,CAAC;EACJ,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;EAEf,oBACIL,OAAA,CAACJ,OAAO;IAACwB,MAAM,EAAElB,KAAK,CAACkB,MAAO;IAACC,KAAK,EAAEnB,KAAK,CAACmB,KAAM;IAClDC,YAAY,EAAElB,KAAK,CAACE,SAAU;IAACiB,YAAY,EAAEnB,KAAK,CAACG,SAAU;IAACC,MAAM,EAAEA;EAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnE;AAElB,CAAC;AAAAxB,EAAA,CA/CKF,kBAAkB;AAAA2B,EAAA,GAAlB3B,kBAAkB;AAmDxB,eAAeA,kBAAkB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}